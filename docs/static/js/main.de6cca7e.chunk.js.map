{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GitExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","res","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","item","GitExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAC5B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAaA,OACE,sBAAMC,SARa,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OACxCN,EAAc,MAIhB,SACE,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAbhB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,a,+BCPdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,4DACL,mCACVC,EAFe,uDACL,mCADK,cAEoDC,UACvEH,GAHmB,sBAKHI,MAAMF,GALH,cAKfG,EALe,gBAMEA,EAAIC,OANN,uBAMbC,EANa,EAMbA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GACrB,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAXhB,kBAedM,GAfc,4CAAH,sDCEPO,EAAc,SAAC,GAAoB,IAAlBb,EAAiB,EAAjBA,IAAKU,EAAY,EAAZA,MACjC,OACE,sBAAKI,UAAU,2DAAf,UACE,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCFGO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SACxB,ECF0B,SAACA,GAC3B,MAA0Bd,mBAAS,CACjCqB,KAAM,GACNa,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAcA,OATAC,qBAAU,WACRxB,EAAQC,GAAUwB,MAAK,SAACd,GACtBY,EAAS,CACPf,KAAMG,EACNU,SAAS,SAGZ,CAACpB,IAEGqB,EDbmBI,CAAazB,GAA/BO,EAAR,EAAQA,KAAMa,EAAd,EAAcA,QAEd,OACE,qCACE,6BAAKpB,IACJoB,GAAW,2CAEZ,qBAAKJ,UAAU,iBAAf,SACGT,EAAKE,KAAI,SAACiB,GACT,OAAO,cAAC,EAAD,eAA+BA,GAAbA,EAAKf,aEUzBgB,EApBM,WACnB,MAAoCzC,mBAAS,IAA7C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAMA,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEC2C,EAAWnB,KAAI,SAACT,GAAD,OACd,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,UCbtB6B,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.de6cca7e.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport const AddCategory = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (inputValue.trim().length > 2) {\n      setCategories((cats) => [inputValue, ...cats]);\n      setInputValue(\"\");\n    }\n  };\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"text\" value={inputValue} onChange={handleInputChange} />\n    </form>\n  );\n};\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n};\n","export const getGifs = async (category) => {\n  const api_key = \"yjX5w5rkBS6cH3g4n0Icn7Ts4tYZGXVI\";\n  const url = `https://api.giphy.com/v1/gifs/search?api_key=${api_key}&q=${encodeURI(\n    category\n  )}&limit=10`;\n  const res = await fetch(url);\n  const { data } = await res.json();\n  const gifs = data.map((img) => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images.downsized_medium.url,\n    };\n  });\n\n  return gifs;\n};\n","import React from \"react\";\n\nexport const GifGridItem = ({ url, title }) => {\n  return (\n    <div className=\"card animate__animated animate__fadeIn animate__delay-1s\">\n      <img src={url} alt={title} />\n      <p>{title}</p>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\nimport { GifGridItem } from \"./GifGridItem\";\n\nexport const GifGrid = ({ category }) => {\n  const { data, loading } = useFetchGifs(category);\n\n  return (\n    <>\n      <h3>{category}</h3>\n      {loading && <p>loading...</p>}\n\n      <div className=\"gifs-container\">\n        {data.map((item) => {\n          return <GifGridItem key={item.id} {...item} />;\n        })}\n      </div>\n    </>\n  );\n};\n","import { useState, useEffect } from \"react\";\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n    getGifs(category).then((img) => {\n      setState({\n        data: img,\n        loading: false,\n      });\n    });\n  }, [category]);\n\n  return state;\n};\n","import React, { useState } from \"react\";\nimport { AddCategory } from \"./components/AddCategory\";\nimport { GifGrid } from \"./components/GifGrid\";\n\nconst GitExpertApp = () => {\n  const [categories, setCategories] = useState([]);\n\n  /* const handleAdd = () => {\n    setCategories([...categories, \"HunterxHunter\"]);\n  };\n*/\n  return (\n    <>\n      <h2>GitExpertApp</h2>\n      <AddCategory setCategories={setCategories} />\n      <hr />\n\n      {categories.map((category) => (\n        <GifGrid key={category} category={category} />\n      ))}\n    </>\n  );\n};\n\nexport default GitExpertApp;\n\n//yjX5w5rkBS6cH3g4n0Icn7Ts4tYZGXVI API\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport GitExpertApp from \"./GitExpertApp\";\n\nReactDOM.render(<GitExpertApp />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}